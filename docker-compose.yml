version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anant -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: anant
      POSTGRES_PASSWORD: supersecret
      POSTGRES_DB: mydb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mononet

  http-backend:
    build:
      context: ./apps/backend
      dockerfile: ./http/Dockerfile
      # target: http
    container_name: http-backend
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8081"
    networks:
      - mononet
    restart:
      on-failure
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=anant
      - DB_PASSWORD=supersecret
      - DB_NAME=mydb

  ws-backend:
    build:
      context: ./apps/backend
      dockerfile: ./ws/Dockerfile
      # target: ws
    container_name: ws-backend
    depends_on:
      http-backend:  # Wait for migrations to complete
          condition: service_started
      postgres:
        condition: service_healthy
    expose:
      - "8082"
    networks:
      - mononet
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=anant
      - DB_PASSWORD=supersecret
      - DB_NAME=mydb

  web:
    build: 
      context : .
      dockerfile : Dockerfile.web
    container_name: web
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "3000"
    networks:
      - mononet
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=anant
      - DB_PASSWORD=supersecret
      - DB_NAME=mydb

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
      - http-backend
      - ws-backend
    restart:
      on-failure
    networks:
      - mononet

volumes:
  postgres-data:

networks:
  mononet:
    driver: bridge
